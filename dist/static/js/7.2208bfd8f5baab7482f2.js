webpackJsonp([7],{KLOZ:function(e,n){},RWkE:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r={name:"Router",data:function(){return{url:"/scrollTop"}},methods:{},beforeRouteUpdate:function(e,n,t){t()},beforeRouteEnter:function(e,n,t){setTimeout(function(){t(function(e){})},100)},beforeRouteLeave:function(e,n,t){window.confirm("Do you really want to leave? you have unsaved changes!")?t():t(!1)}},o={render:function(){var e=this.$createElement,n=this._self._c||e;return n("div",[n("router-link",{attrs:{to:this.url}},[n("h2",[this._v("路由")])]),this._v(" "),this._m(0)],1)},staticRenderFns:[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"text_left font_size15"},[e._v("\n    1.导航被触发。\n    "),t("br"),e._v("\n    2.在失活的组件里调用 beforeRouteLeave 守卫。\n    "),t("br"),e._v("\n    3.调用全局的 beforeEach 守卫。\n    "),t("br"),e._v("\n    4.在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n    "),t("br"),e._v("\n    5.在路由配置里调用 beforeEnter。\n    "),t("br"),e._v("\n    6.解析异步路由组件。\n    "),t("br"),e._v("\n    7.在被激活的组件里调用 beforeRouteEnter。\n    "),t("br"),e._v("\n    8.调用全局的 beforeResolve 守卫 (2.5+)。\n    "),t("br"),e._v("\n    9.导航被确认。\n    "),t("br"),e._v("\n    10.调用全局的 afterEach 钩子。\n    "),t("br"),e._v("\n    11.触发 DOM 更新。\n    "),t("br"),e._v("\n    12.用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。\n  ")])}]};var u=t("VU/8")(r,o,!1,function(e){t("KLOZ")},"data-v-1fbd7496",null);n.default=u.exports}});
//# sourceMappingURL=7.2208bfd8f5baab7482f2.js.map